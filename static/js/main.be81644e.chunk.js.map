{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/Search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","mon","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","monsters","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2UAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCHdC,EAAW,SAACR,GAErB,OACI,qBAAKC,UAAW,YAAhB,SAEQD,EAAMS,IAAIC,KAAI,SAAAP,GAAO,OACjB,cAAC,EAAD,CAA0BA,QAAWA,GAAxBA,EAAQC,UCL5BO,G,MAAS,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAClB,uBAAOZ,UAAW,SAAUa,KAAK,SAASF,YAAaA,EAChDG,SAAUF,MCgDNG,G,wDAhDX,aAAe,IAAD,8BACV,gBAeJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAfpC,EAAKC,MAAQ,CACTC,SAAU,GACVJ,YAAY,IAGhB,EAAKN,aAAgB,EAAKA,aAAaW,KAAlB,gBAPX,E,qDASd,WAAqB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACK,SAASM,S,oBAU/C,WACI,MAAgCC,KAAKR,MAA9BC,EAAP,EAAOA,SAAUJ,EAAjB,EAAiBA,YACXY,EAAmBR,EAASS,QAAO,SAAA7B,GAAO,OAAIA,EAAQG,KAAK2B,cAAcC,SAASf,EAAYc,kBAEpG,OACI,sBAAKhC,UAAU,MAAf,UACI,cAAC,EAAD,CACIW,YAAc,kBACdC,aAAgBiB,KAAKjB,eAGzB,cAAC,EAAD,CAAUJ,IAAOsB,W,GAlCfI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.be81644e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className={'card-container'}>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n        <h1>{props.monster.name}</h1>\r\n        <h2>{props.monster.email}</h2>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './card-list.css';\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => {\r\n\r\n    return(\r\n        <div className={'card-list'}>\r\n            {\r\n                props.mon.map(monster =>\r\n                    <Card key = {monster.id}  monster = {monster}  />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\n\r\nimport './search.css'\r\n//import React, {useState} from \"react\";\r\n\r\nexport const Search = ({placeholder, handleChange}) =>\r\n    <input className={'search'} type=\"search\" placeholder={placeholder}\r\n           onChange={handleChange}/>\r\n","import React, {Component, useState} from 'react';\nimport {CardList} from \"./component/card-list/card-list.component\";\nimport {Search} from \"./component/Search/search.component\";\nimport './App.css';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField:''\n\n        };\n        this.handleChange =  this.handleChange.bind(this)\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') //fetch\n            .then(response => response.json())\n            .then(users => this.setState({monsters:users})); //update our array\n\n    };\n\n    handleChange = (e) => {\n        this.setState({searchField:e.target.value})\n\n    }\n\n\n    render() {\n        const {monsters, searchField} = this.state\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n        return (\n            <div className=\"App\">\n                <Search\n                    placeholder = 'search monsters'\n                    handleChange = {this.handleChange}\n                />\n\n                <CardList mon = {filteredMonsters}>\n\n                </CardList>\n\n            </div>\n        );\n    }\n\n}\n\nconst search = () => {\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}